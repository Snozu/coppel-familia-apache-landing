---
// Benefits section with horizontal swipe timeline - Complete redesign
---

<section class="benefits-section-new relative min-h-screen flex flex-col justify-center items-center overflow-hidden">
  <!-- Video Background -->
  <div class="absolute inset-0 z-0">
    <video
      id="benefits-video"
      class="w-full h-full object-cover"
      autoplay
      muted
      loop
      playsinline
      preload="metadata"
      poster="/video/flag-poster.jpg"
    >
      <source src="/video/flag.mp4" type="video/mp4">
      Your browser does not support the video tag.
    </video>
  </div>

  <!-- Gradient Overlay - Exact match to design -->
  <div class="absolute inset-0 z-5 bg-gradient-benefits-exact"></div>

  <!-- Main Timeline Content -->
  <div class="relative z-10 w-full h-full flex flex-col justify-center items-center">
    
    <!-- Timeline States Container -->
    <div class="timeline-states-container relative w-full h-full flex flex-col justify-center">
      
      <!-- Content above timeline -->
      <div class="timeline-content-above relative z-20 mb-0">
        <!-- Benefit circles appear on swipe -->
        <div id="timeline-circles" class="timeline-circles absolute top-0 left-0 right-0 flex justify-center items-center opacity-0 transition-all duration-500" style="height: 200px; margin-top: -200px;">
          <div class="benefit-circle-container relative">
            <div class="benefit-circle w-44 h-44 md:w-56 md:h-56 lg:w-64 lg:h-64 xl:w-72 xl:h-72 rounded-full border-2 border-red-500 overflow-hidden">
              <img 
                id="current-benefit-image"
                src="/benefits/01.png" 
                alt="Benefit" 
                class="w-full h-full object-cover"
                loading="lazy"
              />
            </div>
          </div>
        </div>
      </div>

      <!-- Content between circle and timeline -->
      <div class="timeline-content-middle relative z-20 text-center mb-4 md:mb-6 lg:mb-8">
        <!-- Initial state shows section title -->
        <div id="timeline-title" class="timeline-title transition-all duration-500 ease-in-out">
          <h2 class="text-white text-5xl md:text-6xl lg:text-7xl xl:text-8xl font-medium uppercase italic tracking-wider text-center">
            BENEFICIOS<br>
            <span class="text-red-500 font-black">EXCLUSIVOS</span>
          </h2>
        </div>
        
        <div id="timeline-title-middle" class="timeline-title-middle transition-all duration-500 ease-in-out opacity-0 absolute inset-0">
          <h3 id="benefit-title-text" class="text-white text-2xl md:text-3xl lg:text-4xl xl:text-5xl font-medium">
            Tecnología y desempeño accesible
          </h3>
        </div>
      </div>

      <!-- LED Timeline Line -->
      <div id="timeline-line-container" class="timeline-line-container relative z-20 w-full mb-4 md:mb-6 lg:mb-8 transition-all duration-800 ease-in-out">
        <div id="timeline-line-wrapper" class="timeline-line-wrapper pl-16 md:pl-20 lg:pl-24 transition-all duration-800 ease-in-out">
          <div class="timeline-line relative w-full h-1 bg-red-500 rounded-full">
          <!-- LED Glow Effect -->
          <div class="timeline-glow absolute inset-0 bg-red-500 rounded-full blur-sm opacity-70"></div>
          <div class="timeline-glow-outer absolute inset-0 bg-red-500 rounded-full blur-md opacity-40 scale-150"></div>
          
          <!-- Progress indicator -->
          <div id="timeline-progress" class="timeline-progress absolute left-0 top-0 h-full bg-red-400 rounded-full transition-all duration-800 ease-in-out" style="width: 0%;">
            <div class="progress-glow absolute inset-0 bg-red-400 rounded-full blur-sm opacity-90"></div>
          </div>
          </div>
        </div>
      </div>

      <!-- Animated Arrows -->
      <div id="timeline-arrows" class="timeline-arrows relative z-20 flex justify-end mb-8 pr-20 md:pr-24 lg:pr-28 -mt-8 transition-opacity duration-500">
        <div class="arrows-container">
          <div class="arrow text-red-500 animate-pulse" style="font-size: 16rem; line-height: 1;">»</div>
        </div>
      </div>

      <!-- Content below timeline -->
      <div class="timeline-content-below absolute z-20 text-center w-full" style="top: 60%; left: 0; right: 0;">
        <div id="timeline-description" class="timeline-description transition-all duration-500 ease-in-out opacity-0">
          <div id="benefit-description-text" class="text-white/80 text-base md:text-lg lg:text-xl max-w-2xl mx-auto px-8 md:px-12 lg:px-16 font-medium">
            <ul class="text-center space-y-2">
              <li>• Motores eficientes y duraderos con bajo consumo</li>
              <li>• Encendido eléctrico y frenos de disco</li>
              <li>• Suspensión ajustable y tablero digital</li>
            </ul>
          </div>
        </div>
      </div>

    </div>
  </div>

  <!-- Touch/Swipe Detection Area -->
  <div class="swipe-detection-area absolute inset-0 z-30"></div>
</section>

<script>
  // @ts-nocheck
  class BenefitsTimelineNew {
    constructor() {
      this.currentState = 0;
      this.totalStates = 6; // 6 states: intro + 5 benefits
      this.isAnimating = false;
      this.isPaused = false;
      this.video = null;
      this.intersectionObserver = null;
      
      this.benefits = [
        {
          id: 'intro',
          title: '<span class="font-medium">BENEFICIOS</span><br><span class="text-red-500 font-black">EXCLUSIVOS</span>',
          description: '',
          image: '',
          showCircle: false
        },
        {
          id: 'technology-performance',
          title: 'Tecnología y desempeño<br>accesible',
          description: [
            '• Motores eficientes y duraderos con bajo consumo de combustible',
            '• Encendido eléctrico y frenos de disco en la mayoría de los modelos',
            '• Componentes confiables como suspensión ajustable y tablero digital'
          ],
          image: '/benefits/01.png',
          showCircle: true
        },
        {
          id: 'design-functionality',
          title: 'Diseño y<br>funcionalidad',
          description: [
            '• Modelos con estilo deportivo o urbano, según tu necesidad',
            '• Asientos cómodos y manubrios ergonómicos para trayectos largos',
            '• Algunos modelos incluyen USB, defensa, parrilla de carga y faros LED'
          ],
          image: '/benefits/02.png',
          showCircle: true
        },
        {
          id: 'ready-for-everything',
          title: 'Listas para lo que<br>necesites',
          description: [
            '• Modelos para moverte, trabajar o rodar por gusto',
            '• Opciones ideales para delivery, traslado diario o primera moto',
            '• Capacidad de carga, buen torque y velocidad tope competitiva'
          ],
          image: '/benefits/03.png',
          showCircle: true
        },
        {
          id: 'support-backing',
          title: 'Soporte y<br>respaldo',
          description: [
            '• Red de servicio TVS en toda la república',
            '• Primer servicio incluido tras la compra (500 o 1000 km según modelo)',
            '• Garantía de 24 meses o 30,000 km'
          ],
          image: '/benefits/04.png',
          showCircle: true
        },
        {
          id: 'international-legacy',
          title: 'Marca internacional<br>con legado',
          description: [
            '• Más de 100 años de experiencia',
            '• Presencia en más de 80 países',
            '• Asociaciones con marcas globales como BMW Motorrad'
          ],
          image: '/benefits/05.png',
          showCircle: true
        }
      ];
    }

    init() {
      console.log('Initializing New Benefits Timeline...');
      this.setupVideo();
      this.setupTouchEvents();
      this.setupIntersectionObserver();
      this.setupKeyboardNavigation();
      this.updateDisplay();
    }

    setupVideo() {
      this.video = document.getElementById('benefits-video');
      if (!this.video) return;

      // Ensure video is ready
      this.video.addEventListener('loadeddata', () => {
        console.log('Benefits video loaded');
      });

      this.video.addEventListener('error', (e) => {
        console.error('Benefits video error:', e);
      });
    }

    setupIntersectionObserver() {
      if (!('IntersectionObserver' in window)) return;

      const section = document.querySelector('.benefits-section-new');
      if (!section) return;

      this.intersectionObserver = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              this.startVideoAndAnimation();
              this.startAutoAdvance();
            } else {
              this.pauseVideoAndAnimation();
              this.stopAutoAdvance();
            }
          });
        },
        { threshold: 0.5 }
      );

      this.intersectionObserver.observe(section);
    }

    startVideoAndAnimation() {
      if (this.video) {
        this.video.play().catch(e => console.log('Video autoplay prevented:', e));
      }
      this.resetToFirst();
    }

    pauseVideoAndAnimation() {
      if (this.video) {
        this.video.pause();
      }
    }

    setupTouchEvents() {
      const swipeArea = document.querySelector('.swipe-detection-area');
      if (!swipeArea) return;

      let startX = 0;
      let isDragging = false;
      let startY = 0;

      // Touch events
      swipeArea.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isDragging = true;
      });

      swipeArea.addEventListener('touchmove', (e) => {
        if (!isDragging) return;
        
        const currentX = e.touches[0].clientX;
        const currentY = e.touches[0].clientY;
        const diffX = Math.abs(currentX - startX);
        const diffY = Math.abs(currentY - startY);
        
        // Only prevent scroll if horizontal swipe is more significant
        if (diffX > diffY && diffX > 10) {
          e.preventDefault();
        }
      });

      swipeArea.addEventListener('touchend', (e) => {
        if (!isDragging) return;
        
        const endX = e.changedTouches[0].clientX;
        const diff = startX - endX;
        const swipeDistance = Math.abs(diff);

        if (swipeDistance > 50) {
          if (diff > 0) {
            this.nextState();
          } else {
            this.prevState();
          }
        }
        
        isDragging = false;
      });

      // Mouse events for desktop
      swipeArea.addEventListener('mousedown', (e) => {
        startX = e.clientX;
        isDragging = true;
        e.preventDefault();
      });

      document.addEventListener('mousemove', (e) => {
        if (!isDragging) return;
        e.preventDefault();
      });

      document.addEventListener('mouseup', (e) => {
        if (!isDragging) return;
        
        const endX = e.clientX;
        const diff = startX - endX;
        const swipeDistance = Math.abs(diff);

        if (swipeDistance > 50) {
          if (diff > 0) {
            this.nextState();
          } else {
            this.prevState();
          }
        }
        
        isDragging = false;
      });

      // Pause on hover
      swipeArea.addEventListener('mouseenter', () => {
        this.isPaused = true;
      });

      swipeArea.addEventListener('mouseleave', () => {
        this.isPaused = false;
      });
    }

    setupKeyboardNavigation() {
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') {
          this.prevState();
        } else if (e.key === 'ArrowRight') {
          this.nextState();
        }
      });
    }

    nextState() {
      if (this.isAnimating) return;
      this.currentState = (this.currentState + 1) % this.totalStates;
      this.updateDisplay();
    }

    prevState() {
      if (this.isAnimating) return;
      this.currentState = this.currentState > 0 ? this.currentState - 1 : this.totalStates - 1;
      this.updateDisplay();
    }

    resetToFirst() {
      this.currentState = 0;
      this.updateDisplay();
    }

    updateDisplay() {
      if (this.isAnimating) return;
      
      this.isAnimating = true;
      const currentBenefit = this.benefits[this.currentState];
      
      // Update progress bar
      const progressElement = document.getElementById('timeline-progress');
      if (progressElement) {
        const progressWidth = (this.currentState / (this.totalStates - 1)) * 100;
        progressElement.style.width = `${progressWidth}%`;
      }

      // Update timeline line expansion
      const lineWrapperElement = document.getElementById('timeline-line-wrapper');
      
      if (lineWrapperElement) {
        if (currentBenefit.showCircle) {
          // Expand line to full width (remove padding)
          lineWrapperElement.style.paddingLeft = '0';
        } else {
          // Restore original padding for initial state
          lineWrapperElement.style.paddingLeft = '';
        }
      }

      // Update title and circle
      const titleElement = document.getElementById('timeline-title');
      const circlesElement = document.getElementById('timeline-circles');
      const titleMiddleElement = document.getElementById('timeline-title-middle');
      const descriptionElement = document.getElementById('timeline-description');
      const arrowsElement = document.getElementById('timeline-arrows');
      
      if (titleElement && circlesElement && titleMiddleElement && descriptionElement && arrowsElement) {
        if (currentBenefit.showCircle) {
          // Show circle, middle title and description, hide main title and arrows
          titleElement.style.opacity = '0';
          circlesElement.style.opacity = '1';
          titleMiddleElement.style.opacity = '1';
          descriptionElement.style.opacity = '1';
          arrowsElement.style.opacity = '0';
          
          // Update image
          const imageElement = document.getElementById('current-benefit-image');
          if (imageElement && currentBenefit.image) {
            imageElement.src = currentBenefit.image;
            imageElement.alt = currentBenefit.title.replace(/<[^>]*>/g, '');
          }
          
          // Update title and description
          const titleTextElement = document.getElementById('benefit-title-text');
          const descriptionTextElement = document.getElementById('benefit-description-text');
          
          if (titleTextElement) {
            titleTextElement.innerHTML = currentBenefit.title;
          }
          
          if (descriptionTextElement && currentBenefit.description) {
            descriptionTextElement.innerHTML = `<ul class="text-center space-y-2 font-medium">${currentBenefit.description.map(item => `<li>${item}</li>`).join('')}</ul>`;
          }
        } else {
          // Show main title and arrows, hide circle and middle content
          titleElement.style.opacity = '1';
          circlesElement.style.opacity = '0';
          titleMiddleElement.style.opacity = '0';
          descriptionElement.style.opacity = '0';
          arrowsElement.style.opacity = '1';
        }
      }

      // Reset animation flag
      setTimeout(() => {
        this.isAnimating = false;
      }, 500);
    }

    startAutoAdvance() {
      this.stopAutoAdvance();
      this.autoAdvanceInterval = setInterval(() => {
        if (!this.isAnimating && !this.isPaused) {
          this.nextState();
        }
      }, 4000); // 4 seconds per state
    }

    stopAutoAdvance() {
      if (this.autoAdvanceInterval) {
        clearInterval(this.autoAdvanceInterval);
        this.autoAdvanceInterval = null;
      }
    }

    destroy() {
      this.stopAutoAdvance();
      if (this.intersectionObserver) {
        this.intersectionObserver.disconnect();
      }
    }
  }

  // Initialize
  const benefitsTimelineNew = new BenefitsTimelineNew();
  
  function initBenefitsTimelineNew() {
    benefitsTimelineNew.init();
  }
  
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initBenefitsTimelineNew);
  } else {
    initBenefitsTimelineNew();
  }
  
  // Cleanup
  window.addEventListener('beforeunload', () => {
    benefitsTimelineNew.destroy();
  });
</script>

<style>
  .benefits-section-new {
    position: relative;
    min-height: 100vh;
    overflow: hidden;
  }

  /* Video Background */
  .benefits-section-new video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    z-index: 0;
  }

  /* Gradient Overlay - Exact match to design capture */
  .bg-gradient-benefits-exact {
    background: 
      /* Main vertical gradient - dark top to navy middle */
      linear-gradient(
        to bottom,
        rgba(0, 0, 0, 0.95) 0%,
        rgba(0, 0, 0, 0.8) 8%,
        rgba(15, 23, 42, 0.85) 20%,
        rgba(30, 41, 59, 0.75) 35%,
        rgba(51, 65, 85, 0.7) 50%,
        rgba(30, 41, 59, 0.8) 65%,
        rgba(15, 23, 42, 0.9) 80%,
        rgba(0, 0, 0, 0.95) 100%
      ),
      /* Right side purple/magenta gradient - very prominent */
      linear-gradient(
        135deg,
        transparent 0%,
        transparent 40%,
        rgba(147, 51, 234, 0.4) 55%,
        rgba(147, 51, 234, 0.6) 65%,
        rgba(168, 85, 247, 0.65) 75%,
        rgba(192, 132, 252, 0.7) 85%,
        rgba(196, 181, 253, 0.75) 95%,
        rgba(196, 181, 253, 0.8) 100%
      ),
      /* Linear red glimmer in bottom right corner - diagonal streak */
      linear-gradient(
        225deg,
        transparent 0%,
        transparent 75%,
        rgba(239, 68, 68, 0.3) 80%,
        rgba(220, 38, 38, 0.5) 85%,
        rgba(185, 28, 28, 0.6) 90%,
        rgba(153, 27, 27, 0.4) 95%,
        transparent 100%
      ),
      /* Subtle red linear streak extending from bottom corner */
      linear-gradient(
        210deg,
        transparent 0%,
        transparent 80%,
        rgba(239, 68, 68, 0.2) 82%,
        rgba(220, 38, 38, 0.35) 87%,
        rgba(185, 28, 28, 0.4) 92%,
        rgba(127, 29, 29, 0.25) 97%,
        transparent 100%
      ),
      /* Red flash effect blending with blue gradient - bottom right */
      radial-gradient(
        ellipse 40% 25% at 88% 85%,
        rgba(239, 68, 68, 0.5) 0%,
        rgba(220, 38, 38, 0.4) 20%,
        rgba(185, 28, 28, 0.3) 40%,
        rgba(30, 41, 59, 0.2) 70%,
        transparent 85%
      ),
      /* Additional purple overlay for right edge intensity */
      radial-gradient(
        ellipse 60% 100% at right center,
        rgba(147, 51, 234, 0.6) 0%,
        rgba(147, 51, 234, 0.45) 30%,
        rgba(147, 51, 234, 0.3) 50%,
        rgba(147, 51, 234, 0.15) 70%,
        transparent 85%
      );
  }

  /* Timeline Line with LED Effect */
  .timeline-line {
    position: relative;
    background: linear-gradient(90deg, #ef4444, #dc2626);
    box-shadow: 
      0 0 10px rgba(239, 68, 68, 0.6),
      0 0 20px rgba(239, 68, 68, 0.4),
      0 0 30px rgba(239, 68, 68, 0.2);
  }

  .timeline-glow {
    animation: ledPulse 2s ease-in-out infinite alternate;
  }

  @keyframes ledPulse {
    0% {
      opacity: 0.7;
      transform: scale(1);
    }
    100% {
      opacity: 1;
      transform: scale(1.1);
    }
  }

  .timeline-progress {
    background: linear-gradient(90deg, #fca5a5, #ef4444);
    box-shadow: 
      0 0 15px rgba(239, 68, 68, 0.8),
      0 0 25px rgba(239, 68, 68, 0.6);
  }

  .progress-glow {
    animation: progressGlow 1s ease-in-out infinite alternate;
  }

  @keyframes progressGlow {
    0% {
      opacity: 0.9;
    }
    100% {
      opacity: 1;
      transform: scale(1.2);
    }
  }

  /* Animated Arrows */
  .arrows-container {
    animation: arrowsBounce 2s ease-in-out infinite;
  }

  @keyframes arrowsBounce {
    0%, 100% {
      transform: translateX(0);
    }
    50% {
      transform: translateX(10px);
    }
  }

  .arrow {
    text-shadow: 0 0 10px rgba(239, 68, 68, 0.8);
  }

  /* Benefit Circle */
  .benefit-circle {
    transition: all 0.5s ease;
    box-shadow: 0 0 20px rgba(239, 68, 68, 0.5);
  }

  .benefit-circle:hover {
    transform: scale(1.1);
    box-shadow: 0 0 30px rgba(239, 68, 68, 0.7);
  }

  /* Swipe Detection Area */
  .swipe-detection-area {
    cursor: grab;
    touch-action: pan-y;
    user-select: none;
    -webkit-user-select: none;
  }

  .swipe-detection-area:active {
    cursor: grabbing;
  }

  /* Transitions */
  .timeline-title,
  .timeline-circles,
  .timeline-description,
  .timeline-content-middle {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }


  /* Responsive Design */
  @media (max-width: 768px) {
    .benefits-section-new h2 {
      font-size: 3rem;
      line-height: 1.1;
    }
    
    .benefit-circle {
      width: 11rem !important;
      height: 11rem !important;
    }
    
    .timeline-content-below h3 {
      font-size: 1.25rem;
    }
    
    .arrow {
      font-size: 10rem !important;
    }
  }

  @media (max-width: 480px) {
    .benefits-section-new h2 {
      font-size: 2.5rem;
      line-height: 1.1;
    }
    
    .benefit-circle {
      width: 8.5rem !important;
      height: 8.5rem !important;
    }
    
    .timeline-content-below h3 {
      font-size: 1.125rem;
    }
    
    .arrow {
      font-size: 8rem !important;
    }
  }

  /* Reduced Motion */
  @media (prefers-reduced-motion: reduce) {
    .timeline-line,
    .timeline-progress,
    .benefit-circle,
    .arrows-container,
    .arrow {
      animation: none !important;
      transition: none !important;
    }
  }
</style>