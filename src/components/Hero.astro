---
import { models } from '../data/models';
---

<section id="rtr-160-2v" class="relative size-full h-dvh bg-black overflow-hidden">
  <!-- Base background -->
  <div class="absolute inset-0 bg-black"></div>
  
  <!-- Coopel Logo -->
  <div class="absolute top-16 left-5 z-40 safe-area-inset-top">
    <img 
      src="/hero/assets/CoopelLogo.png" 
      alt="Coopel Logo" 
      class="size-auto w-[110px] h-auto"
    />
  </div>

  <!-- TVS Logo -->
  <div class="absolute top-16 right-5 z-40 safe-area-inset-top">
    <img 
      src="/hero/assets/TVSLogo.png" 
      alt="TVS Logo" 
      class="size-auto w-[110px] h-[30px]"
    />
  </div>

  <!-- City Video Background - Full screen base layer -->
  <div class="absolute inset-0 z-5">
    <video
      id="city-video"
      class="w-full h-full object-contain object-top"
      autoplay
      muted
      loop
      playsinline
      preload="metadata"
    >
      <source src="/video/city.mp4" type="video/mp4">
      Your browser does not support the video tag.
    </video>
  </div>


  <!-- Highway Image - Overlaid on video -->
  <div class="absolute top-[35%] inset-x-0 h-[40%] z-20">
    <img 
      src="/hero/assets/Highway.png" 
      alt="Highway Background" 
      class="size-full object-cover opacity-100 [transform:perspective(1000px)_rotateX(25deg)_scale(1.4)] origin-bottom"
    />
  </div>

  <!-- Red illumination filter for highway center -->
  <div class="absolute top-[41%] inset-x-0 h-[27%] z-25 
              [background:linear-gradient(to_bottom,transparent_0%,rgba(0,0,0,0.08)_8%,rgba(0,0,0,0.12)_15%,rgba(0,0,0,0.08)_25%,rgba(0,0,0,0.03)_35%,transparent_45%,transparent_65%,rgba(0,0,0,0.02)_75%,rgba(0,0,0,0.05)_85%,rgba(0,0,0,0.08)_92%,rgba(0,0,0,0.12)_100%),radial-gradient(ellipse_80%_100%_at_center,rgba(239,68,68,0.35)_0%,rgba(239,68,68,0.30)_20%,rgba(239,68,68,0.25)_40%,rgba(239,68,68,0.15)_60%,rgba(239,68,68,0.08)_75%,rgba(239,68,68,0.03)_85%,transparent_100%)]
              [filter:blur(2px)]"></div>

  <!-- Global Filter - TEMPORARILY DISABLED FOR DEBUGGING -->
  <!-- <div class="absolute inset-0 z-25 bg-gradient-to-b 
    from-blue-400/30 
    via-blue-500/28
    via-blue-600/25
    via-purple-700/22
    via-red-700/35
    via-red-900/25
    via-red-950/20
    via-black/15
    via-black/35
    via-black/60
    via-black/80
    to-black/95"></div> -->
  


  <!-- Motorcycle Carousel -->
  <div class="absolute top-[20%] left-1/2 -translate-x-1/2 w-full @container z-30 px-4">
    <div class="motorcycle-carousel">
      <div id="carousel-container" class="relative size-full cursor-grab active:cursor-grabbing overflow-hidden">
        <div id="carousel-track" class="flex transition-transform duration-500 ease-out size-full w-[300%]">
          {models.map((model) => (
            <div class="carousel-slide flex-shrink-0 relative flex items-center justify-center select-none w-1/3 h-full">
              <img 
                src={model.hero} 
                alt={model.name}
                class="motorcycle-img object-contain transition-all duration-300 scale-[1.725] 
                       drop-shadow-[0_25px_60px_rgba(0,0,0,0.9)] 
                       [filter:drop-shadow(0_0_40px_rgba(255,255,255,0.08))_drop-shadow(0_0_60px_rgba(59,130,246,0.12))]"
                loading="eager"
              />
              
              <div class="absolute bottom-0 left-[10%] z-30">
                <button 
                  class="model-name-btn text-white font-semibold text-sm tracking-wide font-['Montserrat'] 
                         [text-shadow:2px_2px_8px_rgba(0,0,0,0.9)] text-center
                         hover:text-red-400 hover:scale-105 transition-all duration-300 ease-out
                         cursor-pointer active:scale-95 select-none
                         underline decoration-transparent hover:decoration-red-400 
                         decoration-2 underline-offset-2 transition-colors"
                  data-coppel-url={model.coppelUrl}
                  data-model-name={model.name}
                  type="button"
                >
                  {model.name}
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </div>

  <!-- TVS Racing Logo -->
  <div class="absolute bottom-[289px] left-1/2 -translate-x-1/2 z-40">
    <img 
      src="/hero/assets/Capa_5 (2).png" 
      alt="TVS Racing" 
      class="size-auto h-[55px] max-w-[300px] object-contain"
    />
  </div>

  <!-- Section Title -->
  <div class="absolute bottom-[185px] left-1/2 -translate-x-1/2 w-[90%] max-w-[350px] z-40">
    <h1 class="text-white text-center leading-tight font-['Montserrat'] text-[clamp(18px,4.5vw,23px)]">
      <span class="font-light">Tecnología, Diseño y</span><br>
      <span class="font-light">Rendimiento en </span><span class="text-red-500 font-bold">cada rodada</span>
    </h1>
  </div>
</section>

<script>
  // @ts-nocheck
  class CarouselSwiper {
    currentSlide;
    totalSlides;
    carouselTrack;
    startX;
    currentX;
    startY;
    currentY;
    isDragging;
    threshold;
    autoSlideInterval;
    swipeDirection;

    constructor() {
      this.currentSlide = 0;
      this.totalSlides = 0;
      this.carouselTrack = null;
      this.startX = 0;
      this.currentX = 0;
      this.startY = 0;
      this.currentY = 0;
      this.isDragging = false;
      this.threshold = 50;
      this.autoSlideInterval = null;
      this.swipeDirection = null;
    }

    init() {
      this.carouselTrack = document.getElementById('carousel-track');
      this.totalSlides = document.querySelectorAll('.carousel-slide').length;
      
      if (this.carouselTrack && this.totalSlides > 0) {
        this.carouselTrack.style.width = `${this.totalSlides * 100}%`;
        this.setupEventListeners();
        this.updateCarousel();
        this.startAutoSlide();
      }
    }

    updateCarousel() {
      if (this.carouselTrack && this.totalSlides > 0) {
        const translateX = -this.currentSlide * (100 / this.totalSlides);
        this.carouselTrack.style.transform = `translateX(${translateX}%)`;
      }
    }

    nextSlide() {
      if (this.totalSlides > 0) {
        this.currentSlide = (this.currentSlide + 1) % this.totalSlides;
        this.updateCarousel();
      }
    }

    prevSlide() {
      if (this.totalSlides > 0) {
        this.currentSlide = this.currentSlide === 0 ? this.totalSlides - 1 : this.currentSlide - 1;
        this.updateCarousel();
      }
    }

    handleStart(clientX, clientY) {
      this.startX = clientX;
      this.currentX = clientX;
      this.startY = clientY;
      this.currentY = clientY;
      this.isDragging = true;
      this.swipeDirection = null;
      this.stopAutoSlide();
    }

    handleMove(clientX, clientY) {
      if (!this.isDragging) return;
      this.currentX = clientX;
      this.currentY = clientY;
      
      // Determine swipe direction if not already set
      if (!this.swipeDirection) {
        const deltaX = Math.abs(this.currentX - this.startX);
        const deltaY = Math.abs(this.currentY - this.startY);
        
        // Only set direction if movement is significant enough
        if (deltaX > 10 || deltaY > 10) {
          this.swipeDirection = deltaX > deltaY ? 'horizontal' : 'vertical';
        }
      }
    }

    handleEnd() {
      if (!this.isDragging) return;
      
      // Only handle horizontal swipes for carousel
      if (this.swipeDirection === 'horizontal') {
        const diff = this.currentX - this.startX;
        
        if (Math.abs(diff) > this.threshold) {
          if (diff > 0) {
            this.prevSlide();
          } else {
            this.nextSlide();
          }
        }
      }
      
      this.isDragging = false;
      this.swipeDirection = null;
      this.startAutoSlide();
    }

    setupEventListeners() {
      const carousel = document.getElementById('carousel-container');
      
      if (!carousel) return;

      // Touch events
      carousel.addEventListener('touchstart', (e) => {
        this.handleStart(e.touches[0].clientX, e.touches[0].clientY);
      }, { passive: true });

      carousel.addEventListener('touchmove', (e) => {
        this.handleMove(e.touches[0].clientX, e.touches[0].clientY);
        
        // Only prevent default for horizontal swipes
        if (this.swipeDirection === 'horizontal') {
          e.preventDefault();
        }
      }, { passive: false });

      carousel.addEventListener('touchend', (e) => {
        this.handleEnd();
        
        // Only prevent default if we handled a horizontal swipe
        if (this.swipeDirection === 'horizontal') {
          e.preventDefault();
        }
      }, { passive: false });

      // Mouse events for desktop
      carousel.addEventListener('mousedown', (e) => {
        e.preventDefault();
        this.handleStart(e.clientX, e.clientY);
        carousel.style.cursor = 'grabbing';
      });

      carousel.addEventListener('mousemove', (e) => {
        if (this.isDragging) {
          this.handleMove(e.clientX, e.clientY);
          // For mouse events, we can always prevent default since it's desktop
          e.preventDefault();
        }
      });

      carousel.addEventListener('mouseup', (e) => {
        this.handleEnd();
        carousel.style.cursor = 'grab';
      });

      carousel.addEventListener('mouseleave', () => {
        if (this.isDragging) {
          this.handleEnd();
          carousel.style.cursor = 'grab';
        }
      });

      // Prevent context menu on long press
      carousel.addEventListener('contextmenu', (e) => {
        e.preventDefault();
      });
    }

    startAutoSlide() {
      this.stopAutoSlide();
      this.autoSlideInterval = setInterval(() => {
        if (!this.isDragging) {
          this.nextSlide();
        }
      }, 5000);
    }

    stopAutoSlide() {
      if (this.autoSlideInterval) {
        clearInterval(this.autoSlideInterval);
        this.autoSlideInterval = null;
      }
    }
  }

  // Initialize carousel
  const carousel = new CarouselSwiper();
  
  // Model name click handler for Coppel redirection
  class ModelRedirectHandler {
    init() {
      this.setupModelClickListeners();
    }

    setupModelClickListeners() {
      const modelButtons = document.querySelectorAll('.model-name-btn');
      
      modelButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.stopPropagation(); // Prevent carousel interaction
          this.handleModelClick(button);
        });
      });
    }

    handleModelClick(button) {
      const coppelUrl = button.getAttribute('data-coppel-url');
      const modelName = button.getAttribute('data-model-name');
      
      if (coppelUrl) {
        // Optional: Add analytics tracking here
        console.log(`Redirecting to Coppel for model: ${modelName}`);
        
        // Open in new tab to maintain user's position on the landing page
        window.open(coppelUrl, '_blank', 'noopener,noreferrer');
      } else {
        console.warn(`No Coppel URL found for model: ${modelName}`);
      }
    }
  }

  // Initialize model redirect handler
  const modelRedirectHandler = new ModelRedirectHandler();
  
  // City video initialization
  function initCityVideo() {
    const cityVideo = document.getElementById('city-video');
    if (cityVideo) {
      // Ensure video is ready
      cityVideo.addEventListener('loadeddata', () => {
        console.log('City video loaded');
      });

      cityVideo.addEventListener('error', (e) => {
        console.error('City video error:', e);
      });

      // Play video when in view
      cityVideo.play().catch(e => console.log('City video autoplay prevented:', e));
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    carousel.init();
    initCityVideo();
    modelRedirectHandler.init();
  });

  // Also initialize immediately if DOM is already loaded
  if (document.readyState !== 'loading') {
    setTimeout(() => {
      carousel.init();
      initCityVideo();
      modelRedirectHandler.init();
    }, 100);
  }
</script>

<style>
  .carousel-slide {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }
  
  #carousel-container {
    cursor: grab;
  }
  
  #carousel-container:active {
    cursor: grabbing;
  }





  /* Motorcycle carousel fixes */
  .motorcycle-img {
    object-fit: contain;
  }

  /* Container queries for responsive adjustments */
  @container (max-width: 375px) {
    .motorcycle-carousel {
      max-width: 320px;
      height: 280px;
    }
    
    .motorcycle-img {
      width: 100% !important;
      height: 100% !important;
      max-width: 280px !important;
      max-height: 220px !important;
    }
    
    .carousel-slide h2 {
      font-size: 10px !important;
    }
  }

  @container (min-width: 376px) and (max-width: 414px) {
    .motorcycle-carousel {
      max-width: 360px;
      height: 320px;
    }
    
    .motorcycle-img {
      width: 100% !important;
      height: 100% !important;
      max-width: 320px !important;
      max-height: 260px !important;
    }
    
    .carousel-slide h2 {
      font-size: 11px !important;
    }
  }

  @container (min-width: 415px) and (max-width: 768px) {
    .motorcycle-carousel {
      max-width: 400px;
      height: 360px;
    }
    
    .motorcycle-img {
      width: 100% !important;
      height: 100% !important;
      max-width: 360px !important;
      max-height: 300px !important;
    }
    
    .carousel-slide h2 {
      font-size: 12px !important;
    }
  }

  @container (min-width: 769px) {
    .motorcycle-carousel {
      max-width: 380px;
      height: 400px;
    }
    
    .motorcycle-img {
      width: 100% !important;
      height: 100% !important;
      max-width: none !important;
      max-height: none !important;
    }
    
    .carousel-slide h2 {
      font-size: 16px;
    }
  }

  /* Highway perspective effect */
  .highway-background {
    transform-origin: bottom center;
    backface-visibility: hidden;
  }

  /* Text shadow for better readability */
  h1, h2 {
    text-shadow: 2px 2px 8px rgba(0, 0, 0, 0.9);
  }

  /* Safe area optimization for devices with Dynamic Island, notches, and cameras */
  .safe-area-inset-top {
    padding-top: env(safe-area-inset-top, 0px);
  }

  /* Additional spacing for devices with camera cutouts */
  @media screen and (max-width: 430px) {
    .safe-area-inset-top {
      margin-top: max(env(safe-area-inset-top, 0px), 20px);
    }
  }

  /* iPhone 14 Pro and iPhone 15 Pro Dynamic Island optimization */
  @media screen and (width: 393px) and (height: 852px) {
    .safe-area-inset-top {
      margin-top: max(env(safe-area-inset-top, 0px), 24px);
    }
  }

  /* iPhone 14 Pro Max and iPhone 15 Pro Max optimization */
  @media screen and (width: 430px) and (height: 932px) {
    .safe-area-inset-top {
      margin-top: max(env(safe-area-inset-top, 0px), 24px);
    }
  }

  /* Fix overflow to hide adjacent models while preserving image visibility */
  #carousel-container {
    overflow: visible !important;
  }

  .carousel-slide {
    overflow: visible !important;
  }

  .motorcycle-carousel {
    overflow: visible !important;
  }

  /* Remove old positioning rules */
  .carousel-slide .absolute.left-\[-80px\] {
    position: static !important;
    transform: none !important;
  }

  /* Model name button styles */
  .model-name-btn {
    background: none;
    border: none;
    padding: 4px 8px;
    border-radius: 4px;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
  }

  .model-name-btn:hover {
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    transform: scale(1.05);
  }

  .model-name-btn:active {
    transform: scale(0.95);
  }

  /* Subtle glow effect on hover */
  .model-name-btn:hover::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(45deg, rgba(239, 68, 68, 0.2), rgba(239, 68, 68, 0.1));
    border-radius: 4px;
    z-index: -1;
  }

  /* Focus state for accessibility */
  .model-name-btn:focus {
    outline: 2px solid rgba(239, 68, 68, 0.6);
    outline-offset: 2px;
  }
</style>